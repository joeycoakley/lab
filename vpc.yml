AWSTemplateFormatVersion: 2010-09-09
Description: |
  Base VPC

Resources:
  rVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      InstanceTenancy: default
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-VPC'

  rPrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.1.0/25
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PrivateSubnet-A'
      VpcId: !Ref rVPC

  rPrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.2.0/25
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PrivateSubnet-B'
      VpcId: !Ref rVPC

  rPublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.1.128/25
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet-A'
      VpcId: !Ref rVPC

  rPublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.2.128/25
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet-B'
      VpcId: !Ref rVPC

  rIGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-IGW"

  rIGWAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref rIGW
      VpcId: !Ref rVPC

# NAT Gateway

  rNatGwEipA:
    Type: "AWS::EC2::EIP"
    DependsOn: rIGWAttach
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayEipA"

  rNatGwEipB:
    Type: "AWS::EC2::EIP"
    DependsOn: rIGWAttach
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayEipB"
  
  rNatGwA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt rNatGwEipA.AllocationId
      SubnetId: !Ref rPublicSubnetA
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayA"

  rNatGwB:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt rNatGwEipB.AllocationId
      SubnetId: !Ref rPublicSubnetB
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayB"

# Routing A Side
  
  rPublicRTA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRT-A"
      VpcId: !Ref rVPC

  rPrivateRTA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRT-A"
      VpcId: !Ref rVPC
  
  rPublicRTADefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rIGW
      RouteTableId: !Ref rPublicRTA
    
  rPrivateRTADefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGwA
      RouteTableId: !Ref rPrivateRTA

# Routing B Side

  rPublicRTB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRT-B"
      VpcId: !Ref rVPC

  rPrivateRTB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRT-B"
      VpcId: !Ref rVPC
  
  rPublicRTBDefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rIGW
      RouteTableId: !Ref rPublicRTB
    
  rPrivateRTBDefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGwB
      RouteTableId: !Ref rPrivateRTB

# VPN Connectivity
  # rLambdaRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #               - sts:AssumeRole
  #     Description: String
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Path: /
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: [
  #                 'ssm:Get*',
  #                 'ssm:List*',
  #                 'ssm:Describe*'
  #               ]
  #               Resource: '*'
  #     RoleName: !Sub "{$AWS::StackName}-Retrieve-PSK-Role"
  #     Tags:
  #       - Key: "Name"
  #         Value: !Sub "{$AWS::StackName}-Retrieve-PSK-Role"
  
  # rPskLambda:
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     Code:
  #       ZipFile: |
  #         import json
  #         import boto3
  #         import cfn-response

  #         def lambda_handler(event, context):
  #             ssm = boto3.client('ssm')
  
  #         response = ssm.get_parameter(
  #             Name='JOEYHOMEPSK',
  #             WithDecryption=True
  #         )

  #         cfn-response.send(event, context, response['Parameter']['Value'])  

  #     Description: Retrieve SSM SecureString for IPSEC VPN
  #     Handler: lambda_handler
  #     Role: !GetAtt rLambdaRole.Arn
  #     Runtime: python3.8
  #     Tags:
  #       - Key: "Name"
  #         Value: !Sub "${AWS::StackName}-SSM-IPSEC-Lambda"

  # rPskInvoke:
  #   Type: AWS::CloudFormation::CustomResource
  #   Version: "1.0"
  #   Properties:
  #     ServiceToken: !GetAtt rPskLambda.Arn
  #     FunctionName: lambda_function.lambda_handler
      

  rCGWJoeyHome:
    Type: "AWS::EC2::CustomerGateway"
    Properties:
      BgpAsn: 65000
      IpAddress: '{{resolve:ssm:JOEYHOMEIP:1}}'
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-JoeyHomeCGW"
      Type: ipsec.1
  
  rVpnGw:
    Type: "AWS::EC2::VPNGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-VGW"
      Type: ipsec.1

  rVpnGwAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref rVPC
      VpnGatewayId: !Ref rVpnGw
  
  rVpnConn:
    Type: "AWS::EC2::VPNConnection"
    Properties:
      CustomerGatewayId: !Ref rCGWJoeyHome
      StaticRoutesOnly: True
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-VPNConnection"
      Type: ipsec.1
      VpnGatewayId: !Ref rVpnGw
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: '{{resolve:secretsmanager:JOEYHOMEPSK:SecretString:JOEYHOMEPSK}}'

  rVpnRoutePublicA:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 192.168.0.0/24
      GatewayId: !Ref rVpnGw
      RouteTableId: !Ref rPublicRTA
