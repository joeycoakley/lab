AWSTemplateFormatVersion: 2010-09-09
Description: |
  Base VPC + Web

Parameters:
  pJoeyIp:
    Type: String
    Default: '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-2:082733122167:secret:VPN-cIU3XR:SecretString:JOEYHOMEIP}}'
    Description: Enter Joey Home Public IP - IP Only

  pJoeyHomePsk:
    Type: String
    Default: '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-2:082733122167:secret:VPN-cIU3XR:SecretString:JOEYHOMEPSK}}'
    Description: Pre-Shared Key used for the VPN connection

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  pSsmInstanceProfile:
    Type: String
    Default: SSMInstanceProfile

Resources:
################################# BEGINNING OF NETWORK SECTION ##############################################

  rVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      InstanceTenancy: default
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-VPC'

  rPrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.1.0/25
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PrivateSubnet-A'
      VpcId: !Ref rVPC
    
  rPrivateSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref rPrivateRTA
      SubnetId: !Ref rPrivateSubnetA
  

  rPrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.2.0/25
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PrivateSubnet-B'
      VpcId: !Ref rVPC

  rPrivateSubnetBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref rPrivateRTB
      SubnetId: !Ref rPrivateSubnetB

  rPublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.1.128/25
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet-A'
      VpcId: !Ref rVPC

  rPublicSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref rPublicRTA
      SubnetId: !Ref rPublicSubnetA

  rPublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: 10.0.2.128/25
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet-B'
      VpcId: !Ref rVPC

  rPublicSubnetBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref rPublicRTB
      SubnetId: !Ref rPublicSubnetB

  rIGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-IGW"

  rIGWAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref rIGW
      VpcId: !Ref rVPC

# NAT Gateway

  rNatGwEipA:
    Type: "AWS::EC2::EIP"
    DependsOn: rIGWAttach
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayEipA"

  rNatGwEipB:
    Type: "AWS::EC2::EIP"
    DependsOn: rIGWAttach
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayEipB"
  
  rNatGwA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt rNatGwEipA.AllocationId
      SubnetId: !Ref rPublicSubnetA
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayA"

  rNatGwB:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt rNatGwEipB.AllocationId
      SubnetId: !Ref rPublicSubnetB
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NatGatewayB"

# Routing A Side
  
  rPublicRTA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRT-A"
      VpcId: !Ref rVPC

  rPrivateRTA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateRT-A"
      VpcId: !Ref rVPC
  
  rPublicRTADefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rIGW
      RouteTableId: !Ref rPublicRTA
    
  rPrivateRTADefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGwA
      RouteTableId: !Ref rPrivateRTA

# Routing B Side

  rPublicRTB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRT-B"
      VpcId: !Ref rVPC

  rPrivateRTB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateRT-B"
      VpcId: !Ref rVPC
  
  rPublicRTBDefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rIGW
      RouteTableId: !Ref rPublicRTB
    
  rPrivateRTBDefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGwB
      RouteTableId: !Ref rPrivateRTB

  rCGWJoeyHome:
    Type: "AWS::EC2::CustomerGateway"
    Properties:
      BgpAsn: 65000
      IpAddress: !Ref pJoeyIp
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-JoeyHomeCGW"
      Type: ipsec.1
  
  rVpnGw:
    Type: "AWS::EC2::VPNGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-VGW"
      Type: ipsec.1

  rVpnGwAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref rVPC
      VpnGatewayId: !Ref rVpnGw

  rVpnRouteProp:
    DependsOn: rVpnGwAttach
    Type: "AWS::EC2::VPNGatewayRoutePropagation"
    Properties:
      RouteTableIds:
        - !Ref rPublicRTB
        - !Ref rPublicRTA
        - !Ref rPrivateRTA
        - !Ref rPrivateRTB
      VpnGatewayId: !Ref rVpnGw
  
  rVpnConn:
    Type: "AWS::EC2::VPNConnection"
    Properties:
      CustomerGatewayId: !Ref rCGWJoeyHome
      StaticRoutesOnly: True
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-VPNConnection"
      Type: ipsec.1
      VpnGatewayId: !Ref rVpnGw
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: !Ref pJoeyHomePsk

  rVpnRoute:
    Type: "AWS::EC2::VPNConnectionRoute"
    Properties:
      DestinationCidrBlock: 192.168.0.0/24
      VpnConnectionId: !Ref rVpnConn


########################       END OF NETWORKING SECTION        ##################################

  rWebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow inbound http/https
      GroupName: !Sub "${AWS::StackName}-web-sg"
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443          
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-web-sg"
      VpcId: !Ref rVPC

  rSSMManagedInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              -  "sts:AssumeRole"
      Description: "EC2 Instance Profile for SSM Managed Instances"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      MaxSessionDuration: 3600
      RoleName: !Ref pSsmInstanceProfile
      Tags:
        - Key: "Name"
          Value: SSMInstanceProfile
  
  rIAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Ref pSsmInstanceProfile
      Path: /
      Roles: 
        - !Ref rSSMManagedInstanceRole

  rLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        IamInstanceProfile: 
          Arn: !GetAtt rIAMInstanceProfile.Arn
        ImageId: !Ref LatestAmiId
        InstanceType: "t2.micro"
        SecurityGroups:
          - !Ref rWebServerSecurityGroup
        Monitoring:
          Enabled: True
        UserData: 
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install httpd -y
            systemctl start httpd
            systemctl enable httpd
            groupadd www
            usermod -a -G www ec2-user
            chgrp -R www /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} +
            find /var/www -type f -exec chmod 0664 {} +
            curl -s http://169.254.169.254/latest/meta-data/instance-id >> /var/www/html/index.html

  rWebALB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      CrossZone: True
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      SecurityGroups:
        - !Ref rWebServerSecurityGroup
      Subnets:
        - !Ref rPublicSubnetA
        - !Ref rPublicSubnetB
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-ALB"

  rTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Name: myLoadBalancerTargetGRoup
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-TargetGroup"
      UnhealthyThresholdCount: 2
      VpcId: !Ref rVPC
  
  rWebAutoScalingGroup:
    DependsOn: rIGWAttach
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: WebASG
      Cooldown: "30"
      DesiredCapacity: "4"
      HealthCheckGracePeriod: 30
      HealthCheckType: "ELB"
      LaunchTemplate:
        LaunchTemplateId: !Ref rLaunchTemplate
        Version: !GetAtt rLaunchTemplate.LatestVersionNumber
      LoadBalancerNames:
        - !Ref rWebALB
      MaxSize: "8"
      MinSize: "2"
      Tags:
        - Key: "Name"
          PropagateAtLaunch: False 
          Value: !Sub "${AWS::StackName}-Web-ASG"
      TargetGroupARNs:
        - !Ref rTargetGroup
      VPCZoneIdentifier:
        - !Ref rPublicSubnetA
        - !Ref rPublicSubnetB